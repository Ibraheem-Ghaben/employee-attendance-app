{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Enhanced employee service with filtering\nexport const employeeService = {\n  /**\n   * Get employees with pagination and optional filtering\n   */\n  getEmployees: async (page = 1, pageSize = 50, employeeCode, startDate, endDate) => {\n    try {\n      const params = {\n        page,\n        pageSize\n      };\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get('/employees', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get current user's profile with optional date filtering\n   */\n  getMyProfile: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get('/profile/my-profile', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get specific employee profile\n   */\n  getEmployeeProfile: async (employeeCode, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get(`/profile/${employeeCode}`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Export attendance data to Excel\n   */\n  exportAttendance: async (employeeCode, startDate, endDate) => {\n    try {\n      const params = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/attendance${queryString ? '?' + queryString : ''}`;\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting attendance:', error);\n      throw error;\n    }\n  },\n  /**\n   * Export current user's attendance to Excel\n   */\n  exportMyAttendance: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/my-attendance${queryString ? '?' + queryString : ''}`;\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting my attendance:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","employeeService","getEmployees","page","pageSize","employeeCode","startDate","endDate","params","employee_code","start_date","end_date","response","get","data","error","console","getMyProfile","getEmployeeProfile","exportAttendance","queryString","URLSearchParams","toString","url","fetch","ok","Error","blob","exportMyAttendance"],"sources":["/home/administrator/employee_attendance_app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, ProfileResponse } from '../types/employee';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Enhanced employee service with filtering\nexport const employeeService = {\n  /**\n   * Get employees with pagination and optional filtering\n   */\n  getEmployees: async (\n    page: number = 1,\n    pageSize: number = 50,\n    employeeCode?: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ApiResponse> => {\n    try {\n      const params: any = { page, pageSize };\n      \n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ApiResponse>('/employees', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get current user's profile with optional date filtering\n   */\n  getMyProfile: async (startDate?: string, endDate?: string): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>('/profile/my-profile', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get specific employee profile\n   */\n  getEmployeeProfile: async (\n    employeeCode: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>(`/profile/${employeeCode}`, { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export attendance data to Excel\n   */\n  exportAttendance: async (employeeCode?: string, startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting attendance:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export current user's attendance to Excel\n   */\n  exportMyAttendance: async (startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/my-attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting my attendance:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,eAAe,GAAG;EAC7B;AACF;AACA;EACEC,YAAY,EAAE,MAAAA,CACZC,IAAY,GAAG,CAAC,EAChBC,QAAgB,GAAG,EAAE,EACrBC,YAAqB,EACrBC,SAAkB,EAClBC,OAAgB,KACS;IACzB,IAAI;MACF,MAAMC,MAAW,GAAG;QAAEL,IAAI;QAAEC;MAAS,CAAC;MAEtC,IAAIC,YAAY,EAAEG,MAAM,CAACC,aAAa,GAAGJ,YAAY;MACrD,IAAIC,SAAS,EAAEE,MAAM,CAACE,UAAU,GAAGJ,SAAS;MAC5C,IAAIC,OAAO,EAAEC,MAAM,CAACG,QAAQ,GAAGJ,OAAO;MAEtC,MAAMK,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,GAAG,CAAc,YAAY,EAAE;QAAEL;MAAO,CAAC,CAAC;MACrE,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEE,YAAY,EAAE,MAAAA,CAAOX,SAAkB,EAAEC,OAAgB,KAA+B;IACtF,IAAI;MACF,MAAMC,MAAW,GAAG,CAAC,CAAC;MACtB,IAAIF,SAAS,EAAEE,MAAM,CAACE,UAAU,GAAGJ,SAAS;MAC5C,IAAIC,OAAO,EAAEC,MAAM,CAACG,QAAQ,GAAGJ,OAAO;MAEtC,MAAMK,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,GAAG,CAAkB,qBAAqB,EAAE;QAAEL;MAAO,CAAC,CAAC;MAClF,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEG,kBAAkB,EAAE,MAAAA,CAClBb,YAAoB,EACpBC,SAAkB,EAClBC,OAAgB,KACa;IAC7B,IAAI;MACF,MAAMC,MAAW,GAAG,CAAC,CAAC;MACtB,IAAIF,SAAS,EAAEE,MAAM,CAACE,UAAU,GAAGJ,SAAS;MAC5C,IAAIC,OAAO,EAAEC,MAAM,CAACG,QAAQ,GAAGJ,OAAO;MAEtC,MAAMK,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,GAAG,CAAkB,YAAYR,YAAY,EAAE,EAAE;QAAEG;MAAO,CAAC,CAAC;MACvF,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEI,gBAAgB,EAAE,MAAAA,CAAOd,YAAqB,EAAEC,SAAkB,EAAEC,OAAgB,KAAoB;IACtG,IAAI;MACF,MAAMC,MAAW,GAAG,CAAC,CAAC;MACtB,IAAIH,YAAY,EAAEG,MAAM,CAACC,aAAa,GAAGJ,YAAY;MACrD,IAAIC,SAAS,EAAEE,MAAM,CAACE,UAAU,GAAGJ,SAAS;MAC5C,IAAIC,OAAO,EAAEC,MAAM,CAACG,QAAQ,GAAGJ,OAAO;MAEtC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMqB,WAAW,GAAG,IAAIC,eAAe,CAACb,MAAM,CAAC,CAACc,QAAQ,CAAC,CAAC;MAC1D,MAAMC,GAAG,GAAG,GAAGvC,OAAO,qBAAqBoC,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,EAAE,EAAE;MAEjF,MAAMR,QAAQ,GAAG,MAAMY,KAAK,CAACD,GAAG,EAAE;QAChC/B,OAAO,EAAE;UACP,eAAe,EAAE,UAAUK,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACe,QAAQ,CAACa,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClD,OAAO,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEa,kBAAkB,EAAE,MAAAA,CAAOtB,SAAkB,EAAEC,OAAgB,KAAoB;IACjF,IAAI;MACF,MAAMC,MAAW,GAAG,CAAC,CAAC;MACtB,IAAIF,SAAS,EAAEE,MAAM,CAACE,UAAU,GAAGJ,SAAS;MAC5C,IAAIC,OAAO,EAAEC,MAAM,CAACG,QAAQ,GAAGJ,OAAO;MAEtC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMqB,WAAW,GAAG,IAAIC,eAAe,CAACb,MAAM,CAAC,CAACc,QAAQ,CAAC,CAAC;MAC1D,MAAMC,GAAG,GAAG,GAAGvC,OAAO,wBAAwBoC,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,EAAE,EAAE;MAEpF,MAAMR,QAAQ,GAAG,MAAMY,KAAK,CAACD,GAAG,EAAE;QAChC/B,OAAO,EAAE;UACP,eAAe,EAAE,UAAUK,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACe,QAAQ,CAACa,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClD,OAAO,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAe3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}