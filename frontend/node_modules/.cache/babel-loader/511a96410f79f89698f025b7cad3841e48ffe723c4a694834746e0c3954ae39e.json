{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Enhanced employee service with filtering\nexport const employeeService = {\n  /**\n   * Get employees with pagination and optional filtering\n   */\n  getEmployees: async (page = 1, pageSize = 50, employeeCode, startDate, endDate, employeeName, site, inOutMode) => {\n    try {\n      const params = {\n        page,\n        pageSize\n      };\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      if (employeeName) params.employee_name = employeeName;\n      if (site) params.site = site;\n      if (inOutMode !== undefined && inOutMode !== '') params.in_out_mode = inOutMode;\n      const response = await api.get('/employees', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get unique sites from database\n   */\n  getSites: async () => {\n    try {\n      const response = await api.get('/sites');\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching sites:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get dashboard statistics\n   */\n  getStatistics: async (employeeCode, startDate, endDate) => {\n    try {\n      const params = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get('/statistics', {\n        params\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get current user's profile with optional date filtering\n   */\n  getMyProfile: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get('/profile/my-profile', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get specific employee profile\n   */\n  getEmployeeProfile: async (employeeCode, startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const response = await api.get(`/profile/${employeeCode}`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Export attendance data to Excel\n   */\n  exportAttendance: async (employeeCode, startDate, endDate) => {\n    try {\n      const params = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/attendance${queryString ? '?' + queryString : ''}`;\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting attendance:', error);\n      throw error;\n    }\n  },\n  /**\n   * Export current user's attendance to Excel\n   */\n  exportMyAttendance: async (startDate, endDate) => {\n    try {\n      const params = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/my-attendance${queryString ? '?' + queryString : ''}`;\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting my attendance:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","employeeService","getEmployees","page","pageSize","employeeCode","startDate","endDate","employeeName","site","inOutMode","params","employee_code","start_date","end_date","employee_name","undefined","in_out_mode","response","get","data","error","console","getSites","getStatistics","getMyProfile","getEmployeeProfile","exportAttendance","queryString","URLSearchParams","toString","url","fetch","ok","Error","blob","exportMyAttendance"],"sources":["/home/administrator/employee_attendance_app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, ProfileResponse } from '../types/employee';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Enhanced employee service with filtering\nexport const employeeService = {\n  /**\n   * Get employees with pagination and optional filtering\n   */\n  getEmployees: async (\n    page: number = 1,\n    pageSize: number = 50,\n    employeeCode?: string,\n    startDate?: string,\n    endDate?: string,\n    employeeName?: string,\n    site?: string,\n    inOutMode?: string\n  ): Promise<ApiResponse> => {\n    try {\n      const params: any = { page, pageSize };\n      \n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n      if (employeeName) params.employee_name = employeeName;\n      if (site) params.site = site;\n      if (inOutMode !== undefined && inOutMode !== '') params.in_out_mode = inOutMode;\n\n      const response = await api.get<ApiResponse>('/employees', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get unique sites from database\n   */\n  getSites: async (): Promise<string[]> => {\n    try {\n      const response = await api.get<{ success: boolean; data: string[] }>('/sites');\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching sites:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get dashboard statistics\n   */\n  getStatistics: async (employeeCode?: string, startDate?: string, endDate?: string): Promise<any> => {\n    try {\n      const params: any = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<{ success: boolean; data: any }>('/statistics', { params });\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get current user's profile with optional date filtering\n   */\n  getMyProfile: async (startDate?: string, endDate?: string): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>('/profile/my-profile', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get specific employee profile\n   */\n  getEmployeeProfile: async (\n    employeeCode: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>(`/profile/${employeeCode}`, { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export attendance data to Excel\n   */\n  exportAttendance: async (employeeCode?: string, startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting attendance:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export current user's attendance to Excel\n   */\n  exportMyAttendance: async (startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/my-attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting my attendance:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}