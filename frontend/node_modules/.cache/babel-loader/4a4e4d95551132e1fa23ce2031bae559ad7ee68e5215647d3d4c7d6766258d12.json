{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Add auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Enhanced employee service with filtering\nexport const employeeService={/**\n   * Get employees with pagination and optional filtering\n   */getEmployees:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let pageSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;let employeeCode=arguments.length>2?arguments[2]:undefined;let startDate=arguments.length>3?arguments[3]:undefined;let endDate=arguments.length>4?arguments[4]:undefined;try{const params={page,pageSize};if(employeeCode)params.employee_code=employeeCode;if(startDate)params.start_date=startDate;if(endDate)params.end_date=endDate;const response=await api.get('/employees',{params});return response.data;}catch(error){console.error('Error fetching employees:',error);throw error;}},/**\n   * Get current user's profile with optional date filtering\n   */getMyProfile:async(startDate,endDate)=>{try{const params={};if(startDate)params.start_date=startDate;if(endDate)params.end_date=endDate;const response=await api.get('/profile/my-profile',{params});return response.data;}catch(error){console.error('Error fetching profile:',error);throw error;}},/**\n   * Get specific employee profile\n   */getEmployeeProfile:async(employeeCode,startDate,endDate)=>{try{const params={};if(startDate)params.start_date=startDate;if(endDate)params.end_date=endDate;const response=await api.get(\"/profile/\".concat(employeeCode),{params});return response.data;}catch(error){console.error('Error fetching employee profile:',error);throw error;}},/**\n   * Export attendance data to Excel\n   */exportAttendance:async(employeeCode,startDate,endDate)=>{try{const params={};if(employeeCode)params.employee_code=employeeCode;if(startDate)params.start_date=startDate;if(endDate)params.end_date=endDate;const token=localStorage.getItem('token');const queryString=new URLSearchParams(params).toString();const url=\"\".concat(API_URL,\"/export/attendance\").concat(queryString?'?'+queryString:'');const response=await fetch(url,{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok)throw new Error('Export failed');return await response.blob();}catch(error){console.error('Error exporting attendance:',error);throw error;}},/**\n   * Export current user's attendance to Excel\n   */exportMyAttendance:async(startDate,endDate)=>{try{const params={};if(startDate)params.start_date=startDate;if(endDate)params.end_date=endDate;const token=localStorage.getItem('token');const queryString=new URLSearchParams(params).toString();const url=\"\".concat(API_URL,\"/export/my-attendance\").concat(queryString?'?'+queryString:'');const response=await fetch(url,{headers:{'Authorization':\"Bearer \".concat(token)}});if(!response.ok)throw new Error('Export failed');return await response.blob();}catch(error){console.error('Error exporting my attendance:',error);throw error;}}};export default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","employeeService","getEmployees","page","arguments","length","undefined","pageSize","employeeCode","startDate","endDate","params","employee_code","start_date","end_date","response","get","data","error","console","getMyProfile","getEmployeeProfile","exportAttendance","queryString","URLSearchParams","toString","url","fetch","ok","Error","blob","exportMyAttendance"],"sources":["/home/administrator/employee_attendance_app/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { ApiResponse, ProfileResponse } from '../types/employee';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Enhanced employee service with filtering\nexport const employeeService = {\n  /**\n   * Get employees with pagination and optional filtering\n   */\n  getEmployees: async (\n    page: number = 1,\n    pageSize: number = 50,\n    employeeCode?: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ApiResponse> => {\n    try {\n      const params: any = { page, pageSize };\n      \n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ApiResponse>('/employees', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get current user's profile with optional date filtering\n   */\n  getMyProfile: async (startDate?: string, endDate?: string): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>('/profile/my-profile', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get specific employee profile\n   */\n  getEmployeeProfile: async (\n    employeeCode: string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<ProfileResponse> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const response = await api.get<ProfileResponse>(`/profile/${employeeCode}`, { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching employee profile:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export attendance data to Excel\n   */\n  exportAttendance: async (employeeCode?: string, startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (employeeCode) params.employee_code = employeeCode;\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting attendance:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export current user's attendance to Excel\n   */\n  exportMyAttendance: async (startDate?: string, endDate?: string): Promise<Blob> => {\n    try {\n      const params: any = {};\n      if (startDate) params.start_date = startDate;\n      if (endDate) params.end_date = endDate;\n\n      const token = localStorage.getItem('token');\n      const queryString = new URLSearchParams(params).toString();\n      const url = `${API_URL}/export/my-attendance${queryString ? '?' + queryString : ''}`;\n\n      const response = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Export failed');\n      return await response.blob();\n    } catch (error) {\n      console.error('Error exporting my attendance:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}